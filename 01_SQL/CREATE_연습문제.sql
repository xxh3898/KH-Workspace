-- 실습문제 --
-- 도서관리 프로그램을 만들기 위한 테이블들 만들기 --
-- 이때, 제약조건에 이름을 부여할 것
-- 각 컬럼에 주석 달기

-- 1. 출판사들에 대한 데이터를 담기 위한 출판사 테이블(TB_PUBLISHER)
-- 컬럼 : PUB_NO (출판사 번호) - 기본키 (PUBLISHER_PK)
--        PUB_NAME (출판사명) - NOT NULL (PUBLISHER_NN)
--        PHONE (출판사 전화번호) - 제약조건 없음

-- 샘플 3개 정도 생성
CREATE TABLE TB_PUBLISHER(
    PUB_NO NUMBER CONSTRAINT PUBLISHER_PK PRIMARY KEY,
    PUB_NAME VARCHAR2(40) CONSTRAINT PUBLISHER_NN NOT NULL,
    PHONE VARCHAR2(13)
);
INSERT INTO TB_PUBLISHER VALUES (1, '한빛미디어', '02-1234-5678');
INSERT INTO TB_PUBLISHER VALUES (2, '길벗', '02-2345-6789');
INSERT INTO TB_PUBLISHER VALUES (3, '위키북스', '02-3456-7890');

COMMENT ON COLUMN TB_PUBLISHER.PUB_NO IS '출판사 번호';
COMMENT ON COLUMN TB_PUBLISHER.PUB_NAME IS '출판사명';
COMMENT ON COLUMN TB_PUBLISHER.PHONE IS '출판사 전화번호';

-- 2. 도서들에 대한 데이터를 담기 위한 도서 테이블(TB_BOOK)
-- 컬럼 : BK_NO (도서번호) - 기본키 (BOOK_PK)
--        BK_TITLE (도서명) - NOT NULL (BOOK__NN_TITLE)
--        BK_AUTHOR (저자명) - NOT NULL (BOOK__NN_AUTHOR)
--        BK_PRICE (가격) - 제약조건 없음
--        BK_PUB_NO (출판사 번호) - 외래키 (BOOK_FK), TB_PUBLISHER 테이블 참조
--                                 이때 참조하고 있는 부모데이터 삭제 시 자식데이터도 삭제되도록 옵션 지정

-- 샘플 5개 정도 생성

CREATE TABLE TB_BOOK(
    BK_NO NUMBER CONSTRAINT BOOK_PK PRIMARY KEY,
    BK_TITLE VARCHAR2(100) CONSTRAINT BOOK__NN_TITLE NOT NULL,
    BK_AUTHOR VARCHAR2(50) CONSTRAINT BOOK__NN_AUTHOR NOT NULL,
    BK_PRICE NUMBER,
    BK_PUB_NO NUMBER CONSTRAINT BOOK_FK REFERENCES TB_PUBLISHER(PUB_NO) ON DELETE CASCADE
    -- BK_PUB_NO  NUMBER, CONSTRAINT BOOK_FK FOREIGN KEY (BK_PUB_NO) REFERENCES TB_PUBLISHER(PUB_NO) ON DELETE CASCADE
);
INSERT INTO TB_BOOK VALUES (101, '이것이 자바다', '신용권', 35000, 1);
INSERT INTO TB_BOOK VALUES (102, 'Do it! 파이썬 프로그래밍', '이지스퍼블리싱', 28000, 2);
INSERT INTO TB_BOOK VALUES (103, '모두의 데이터 분석 with 파이썬', '송석리', 24000, 2);
INSERT INTO TB_BOOK VALUES (104, '혼자 공부하는 C언어', '윤성우', 33000, 1);
INSERT INTO TB_BOOK VALUES (105, '파이썬 웹 프로그래밍', '이강성', 30000, 3);

COMMENT ON COLUMN TB_BOOK.BK_NO IS '도서번호';
COMMENT ON COLUMN TB_BOOK.BK_TITLE IS '도서명';
COMMENT ON COLUMN TB_BOOK.BK_AUTHOR IS '저자명';
COMMENT ON COLUMN TB_BOOK.BK_PRICE IS '가격';
COMMENT ON COLUMN TB_BOOK.BK_PUB_NO IS '출판사 번호';


-- 3. 회원에 대한 데이터를 담기 위한 회원 테이블(TB_MEMBER)
-- 컬럼 : MEMBER_NO (회원번호) - 기본키 (MEMBER_PK)
--        MEMBER_ID (아이디) - 중복금지 (MEMBER_UQ_ID)
--        MEMBER_PWD (비밀번호) - NOT NULL (MEMBER_NN_PWD)
--        MEMBER_NAME (회원명) - NOT NULL (MEMBER_NN_NAME)
--        GENDER (성별) - M 또는 F로 제한 (MEMBER_CK_GEN)
--        ADDRESS (주소) - 제약조건 없음
--        PHONE (연락처) - 제약조건 없음
--        STATUS (탈퇴여부) - 기본값 N, N 또는 Y만 허용 (MEMBER_CK_STA)
--        ENROLL_DATE (가입일) - 기본값 SYSDATE, NOT NULL (MEMBER_NN_EN)

-- 샘플 5개 정도 생성
CREATE TABLE TB_MEMBER(
    MEMBER_NO NUMBER CONSTRAINT MEMBER_PK PRIMARY KEY,
    MEMBER_ID VARCHAR2(30) CONSTRAINT MEMBER_UQ_ID UNIQUE,
    MEMBER_PWD VARCHAR2(30) CONSTRAINT MEMBER_NN_PWD NOT NULL,
    MEMBER_NAME VARCHAR2(30) CONSTRAINT MEMBER_NN_NAME NOT NULL,
    GENDER CHAR(1) CONSTRAINT MEMBER_CK_GEN CHECK(GENDER IN ('M', 'F')),
    ADDRESS VARCHAR2(100),
    PHONE VARCHAR2(15),
    STATUS CHAR(1) DEFAULT 'N',
    ENROLL_DATE DATE DEFAULT SYSDATE CONSTRAINT MEMBER_NN_EN NOT NULL,
    CONSTRAINT MEMBER_CK_STA CHECK (STATUS IN ('N', 'Y'))
);
INSERT INTO TB_MEMBER VALUES (1, 'hong123', 'pwd1234', '홍길동', 'M', '서울시 강남구', '010-1234-5678', 'N', SYSDATE);
INSERT INTO TB_MEMBER VALUES (2, 'kim456', 'pass5678', '김영희', 'F', '부산시 해운대구', '010-2345-6789', 'N', SYSDATE);
INSERT INTO TB_MEMBER VALUES (3, 'lee789', 'qwer7890', '이철수', 'M', '대구시 중구', '010-3456-7890', 'Y', SYSDATE);
INSERT INTO TB_MEMBER VALUES (4, 'park321', 'zxcv1234', '박지민', 'F', '인천시 연수구', '010-4567-8901', 'N', SYSDATE);
INSERT INTO TB_MEMBER VALUES (5, 'choi654', 'asdf5678', '최현우', 'M', '광주시 북구', '010-5678-9012', 'Y', SYSDATE);


-- 4. 어떤 회원이 어떤 도서를 대여했는지에 대한 대여목록 테이블(TB_RENT)
-- 컬럼 : RENT_NO (대여번호) - 기본키 (RENT_PK)
--        RENT_MEM_NO (대여회원번호) - 외래키 (RENT_FK_MEM), TB_MEMBER 참조
--                                     부모 데이터 삭제 시 자식데이터 값이 NULL이 되도록 지정
--        RENT_BOOK_NO (대여도서번호) - 외래키 (RENT_FK_BOOK), TB_BOOK 참조
--                                      부모 데이터 삭제 시 자식데이터 값이 NULL이 되도록 지정
--        RENT_DATE (대여일) - 기본값 SYSDATE

-- 샘플 3개 정도 생성
CREATE TABLE TB_RENT(
    RENT_NO NUMBER CONSTRAINT RENT_PK PRIMARY KEY,
    RENT_MEM_NO NUMBER CONSTRAINT RENT_FK_MEM FOREIGN KEY(RENT_MEM_NO) REFERENCES TB_MEMBER(MEM_NO) ON DELETE SET NULL,
    RENT_BOOK_NO NUMBER CONSTRAINT RENT_FK_BOOK FOREIGN KEY(RENT_BOOK_NO) REFERENCES TB_BOOK(BOOK_NO) ON DELETE SET NULL,
    RENT_DATE DATE DEFAULT SYSDATE
);
CREATE TABLE TB_RENT (
    RENT_NO NUMBER CONSTRAINT RENT_PK PRIMARY KEY,
    RENT_MEM_NO NUMBER NULL,
    RENT_BOOK_NO NUMBER NULL,
    RENT_DATE DATE DEFAULT SYSDATE,
    CONSTRAINT RENT_FK_MEM FOREIGN KEY (RENT_MEM_NO) REFERENCES TB_MEMBER(MEMBER_NO) ON DELETE SET NULL,  
    CONSTRAINT RENT_FK_BOOK FOREIGN KEY (RENT_BOOK_NO) REFERENCES TB_BOOK(BK_NO) ON DELETE SET NULL
);
INSERT INTO TB_RENT (RENT_NO, RENT_MEM_NO, RENT_BOOK_NO) VALUES (1, 1, 101);
INSERT INTO TB_RENT (RENT_NO, RENT_MEM_NO, RENT_BOOK_NO) VALUES (2, 2, 102);
INSERT INTO TB_RENT (RENT_NO, RENT_MEM_NO, RENT_BOOK_NO) VALUES (3, 3, 103);


-- 대여목록 조회
-- TB_RENT, TB_MEMBER, TB_BOOK 테이블을 JOIN하여 대여 정보를 조회
SELECT *
FROM
    TB_RENT R
    LEFT JOIN TB_MEMBER M ON R.RENT_MEM_NO = M.MEMBER_NO
    LEFT JOIN TB_BOOK B ON R.RENT_BOOK_NO = B.BK_NO
ORDER BY
    R.RENT_DATE DESC;
